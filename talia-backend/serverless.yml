
service: talija

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.9
  profile: serverlessTalija
  region: eu-central-1
  stage: dev
  environment:
    user_pool_id: {Ref: UserPool}
    client_id: {Ref: UserClient}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:*
        - s3:*
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminUpdateUserAttributes
        - cognito-idp:AdminSetUserSettings
        - cognito-idp:AdminDeleteUser
        - cognito-idp:ListUsers
        - cognito-idp:AdminSetUserPassword
        - cognito-idp:AdminConfirmSignUp
        - sns:Publish 
        - sns:CreateTopic
        - sns:Subscribe
        - ses:*
      Resource: '*'
functions:
  hello:
    handler: handler.hello

resources:
  Resources:
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoUserPool
        Type: COGNITO_USER_POOLS
        IdentitySource: method.request.header.Authorization
        RestApiId:
          Ref: ApiGatewayRestApi
        ProviderARNs:
          -Fn:GetAtt:
            - UserPool
            - Arn
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: usersTalia
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 5
        AutoVerifiedAttributes: ["email"]
    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-talia
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccesTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH

